* TODO Allow any non operator as a unit

Right now we only strings and % characters as units

* TODO Multi unit handling in functions

Pass the token instead of the number into functions and do a wrapper around the math functions.

* TODO Write about rule set choice

You could also let users define behavior of infix operators, but then you would end up with a giant code table like this:

This gives you more control, but wont make things easier, you still have to generate tables in code:

#+begin_src ts
const add = (l, r) => {
  if (l.unit === "rem" && r.unit === "px") return l.value * 16 + r.value;
  if (l.unit === "px" && r.unit === "rem") return r.value * 16 + l.value;
}

{infixOperators: {"+": add}}
#+end_src

For units like ~km|m|dm|cm|mm~ this will amount to some custom logic and if you support multiple units your function will grow quite large.

On the other hand this will then have the same interface as multi unit handling in functions.

You could also use libraries like ts-match for this

#+begin_src ts
import { match, P } from 'ts-pattern';

const remToPx = (token) => token.type === 'rem' ? token.value * 16 : token.value;

const add = (l, r) => {
    return match(new Set([l.type, r.type]))
      .with(P.set("rem", "px"), () => remToPx(l) + remToPx(r));
}
#+end_src

* TODO Tuple mathcing

Look into tuple matching from ts-match
https://github.com/gvergnaud/ts-pattern?tab=readme-ov-file#tuples-arrays

#+BEGIN_QUOTE
Tuples (arrays)
In TypeScript, Tuples are arrays with a fixed number of elements that can be of different types. You can pattern-match on tuples using a tuple pattern. A tuple pattern will match if the input value is an array of the same length, and each item matches the corresponding sub-pattern.

import { match, P } from 'ts-pattern';

type Input =
  | [number, '+', number]
  | [number, '-', number]
  | [number, '*', number]
  | ['-', number];

const input = [3, '*', 4] as Input;

const output = match(input)
  .with([P._, '+', P._], ([x, , y]) => x + y)
  .with([P._, '-', P._], ([x, , y]) => x - y)
  .with([P._, '*', P._], ([x, , y]) => x * y)
  .with(['-', P._], ([, x]) => -x)
  .exhaustive();

console.log(output);
// => 12
#+END_QUOTE
